# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReadOnlyGroupSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'int',
        'description': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'user': 'int',
        'organization': 'int',
        'share_all': 'bool',
        'share_org': 'bool',
        'channels_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'description': 'description',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'user': 'user',
        'organization': 'organization',
        'share_all': 'share_all',
        'share_org': 'share_org',
        'channels_count': 'channels_count'
    }

    def __init__(self, name=None, id=None, description=None, created_at=None, updated_at=None, user=None, organization=None, share_all=None, share_org=None, channels_count=None):  # noqa: E501
        """ReadOnlyGroupSerializer - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self._user = None
        self._organization = None
        self._share_all = None
        self._share_org = None
        self._channels_count = None
        self.discriminator = None
        self.name = name
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user
        self.organization = organization
        if share_all is not None:
            self.share_all = share_all
        if share_org is not None:
            self.share_org = share_org
        if channels_count is not None:
            self.channels_count = channels_count

    @property
    def name(self):
        """Gets the name of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The name of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReadOnlyGroupSerializer.


        :param name: The name of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The id of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReadOnlyGroupSerializer.


        :param id: The id of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The description of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReadOnlyGroupSerializer.


        :param description: The description of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The created_at of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReadOnlyGroupSerializer.


        :param created_at: The created_at of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The updated_at of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReadOnlyGroupSerializer.


        :param updated_at: The updated_at of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The user of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReadOnlyGroupSerializer.


        :param user: The user of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def organization(self):
        """Gets the organization of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The organization of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: int
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ReadOnlyGroupSerializer.


        :param organization: The organization of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: int
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def share_all(self):
        """Gets the share_all of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The share_all of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_all

    @share_all.setter
    def share_all(self, share_all):
        """Sets the share_all of this ReadOnlyGroupSerializer.


        :param share_all: The share_all of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: bool
        """

        self._share_all = share_all

    @property
    def share_org(self):
        """Gets the share_org of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The share_org of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_org

    @share_org.setter
    def share_org(self, share_org):
        """Sets the share_org of this ReadOnlyGroupSerializer.


        :param share_org: The share_org of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: bool
        """

        self._share_org = share_org

    @property
    def channels_count(self):
        """Gets the channels_count of this ReadOnlyGroupSerializer.  # noqa: E501


        :return: The channels_count of this ReadOnlyGroupSerializer.  # noqa: E501
        :rtype: int
        """
        return self._channels_count

    @channels_count.setter
    def channels_count(self, channels_count):
        """Sets the channels_count of this ReadOnlyGroupSerializer.


        :param channels_count: The channels_count of this ReadOnlyGroupSerializer.  # noqa: E501
        :type: int
        """

        self._channels_count = channels_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadOnlyGroupSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadOnlyGroupSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
