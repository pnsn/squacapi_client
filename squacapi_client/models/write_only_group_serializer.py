# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriteOnlyGroupSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'organization': 'int',
        'share_all': 'bool',
        'share_org': 'bool',
        'auto_include_channels': 'list[int]',
        'auto_exclude_channels': 'list[int]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'organization': 'organization',
        'share_all': 'share_all',
        'share_org': 'share_org',
        'auto_include_channels': 'auto_include_channels',
        'auto_exclude_channels': 'auto_exclude_channels'
    }

    def __init__(self, name=None, description=None, organization=None, share_all=None, share_org=None, auto_include_channels=None, auto_exclude_channels=None):  # noqa: E501
        """WriteOnlyGroupSerializer - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._organization = None
        self._share_all = None
        self._share_org = None
        self._auto_include_channels = None
        self._auto_exclude_channels = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.organization = organization
        if share_all is not None:
            self.share_all = share_all
        if share_org is not None:
            self.share_org = share_org
        self.auto_include_channels = auto_include_channels
        self.auto_exclude_channels = auto_exclude_channels

    @property
    def name(self):
        """Gets the name of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The name of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WriteOnlyGroupSerializer.


        :param name: The name of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The description of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WriteOnlyGroupSerializer.


        :param description: The description of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def organization(self):
        """Gets the organization of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The organization of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: int
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this WriteOnlyGroupSerializer.


        :param organization: The organization of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: int
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def share_all(self):
        """Gets the share_all of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The share_all of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_all

    @share_all.setter
    def share_all(self, share_all):
        """Sets the share_all of this WriteOnlyGroupSerializer.


        :param share_all: The share_all of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: bool
        """

        self._share_all = share_all

    @property
    def share_org(self):
        """Gets the share_org of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The share_org of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_org

    @share_org.setter
    def share_org(self, share_org):
        """Sets the share_org of this WriteOnlyGroupSerializer.


        :param share_org: The share_org of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: bool
        """

        self._share_org = share_org

    @property
    def auto_include_channels(self):
        """Gets the auto_include_channels of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The auto_include_channels of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: list[int]
        """
        return self._auto_include_channels

    @auto_include_channels.setter
    def auto_include_channels(self, auto_include_channels):
        """Sets the auto_include_channels of this WriteOnlyGroupSerializer.


        :param auto_include_channels: The auto_include_channels of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: list[int]
        """
        if auto_include_channels is None:
            raise ValueError("Invalid value for `auto_include_channels`, must not be `None`")  # noqa: E501

        self._auto_include_channels = auto_include_channels

    @property
    def auto_exclude_channels(self):
        """Gets the auto_exclude_channels of this WriteOnlyGroupSerializer.  # noqa: E501


        :return: The auto_exclude_channels of this WriteOnlyGroupSerializer.  # noqa: E501
        :rtype: list[int]
        """
        return self._auto_exclude_channels

    @auto_exclude_channels.setter
    def auto_exclude_channels(self, auto_exclude_channels):
        """Sets the auto_exclude_channels of this WriteOnlyGroupSerializer.


        :param auto_exclude_channels: The auto_exclude_channels of this WriteOnlyGroupSerializer.  # noqa: E501
        :type: list[int]
        """
        if auto_exclude_channels is None:
            raise ValueError("Invalid value for `auto_exclude_channels`, must not be `None`")  # noqa: E501

        self._auto_exclude_channels = auto_exclude_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyGroupSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyGroupSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
