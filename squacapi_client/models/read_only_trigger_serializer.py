# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReadOnlyTriggerSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'monitor': 'int',
        'val1': 'float',
        'val2': 'float',
        'value_operator': 'str',
        'num_channels': 'int',
        'num_channels_operator': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'user': 'int',
        'emails': 'str',
        'alert_on_out_of_alarm': 'bool',
        'latest_alert': 'Alert'
    }

    attribute_map = {
        'id': 'id',
        'monitor': 'monitor',
        'val1': 'val1',
        'val2': 'val2',
        'value_operator': 'value_operator',
        'num_channels': 'num_channels',
        'num_channels_operator': 'num_channels_operator',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'user': 'user',
        'emails': 'emails',
        'alert_on_out_of_alarm': 'alert_on_out_of_alarm',
        'latest_alert': 'latest_alert'
    }

    def __init__(self, id=None, monitor=None, val1=None, val2=None, value_operator=None, num_channels=None, num_channels_operator=None, created_at=None, updated_at=None, user=None, emails=None, alert_on_out_of_alarm=None, latest_alert=None):  # noqa: E501
        """ReadOnlyTriggerSerializer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._monitor = None
        self._val1 = None
        self._val2 = None
        self._value_operator = None
        self._num_channels = None
        self._num_channels_operator = None
        self._created_at = None
        self._updated_at = None
        self._user = None
        self._emails = None
        self._alert_on_out_of_alarm = None
        self._latest_alert = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.monitor = monitor
        self.val1 = val1
        if val2 is not None:
            self.val2 = val2
        if value_operator is not None:
            self.value_operator = value_operator
        if num_channels is not None:
            self.num_channels = num_channels
        if num_channels_operator is not None:
            self.num_channels_operator = num_channels_operator
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user
        if emails is not None:
            self.emails = emails
        if alert_on_out_of_alarm is not None:
            self.alert_on_out_of_alarm = alert_on_out_of_alarm
        if latest_alert is not None:
            self.latest_alert = latest_alert

    @property
    def id(self):
        """Gets the id of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The id of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReadOnlyTriggerSerializer.


        :param id: The id of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def monitor(self):
        """Gets the monitor of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The monitor of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ReadOnlyTriggerSerializer.


        :param monitor: The monitor of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def val1(self):
        """Gets the val1 of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The val1 of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._val1

    @val1.setter
    def val1(self, val1):
        """Sets the val1 of this ReadOnlyTriggerSerializer.


        :param val1: The val1 of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """
        if val1 is None:
            raise ValueError("Invalid value for `val1`, must not be `None`")  # noqa: E501

        self._val1 = val1

    @property
    def val2(self):
        """Gets the val2 of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The val2 of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._val2

    @val2.setter
    def val2(self, val2):
        """Sets the val2 of this ReadOnlyTriggerSerializer.


        :param val2: The val2 of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """

        self._val2 = val2

    @property
    def value_operator(self):
        """Gets the value_operator of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The value_operator of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._value_operator

    @value_operator.setter
    def value_operator(self, value_operator):
        """Sets the value_operator of this ReadOnlyTriggerSerializer.


        :param value_operator: The value_operator of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """
        allowed_values = ["outsideof", "within", "==", "<", "<=", ">", ">="]  # noqa: E501
        if value_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `value_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(value_operator, allowed_values)
            )

        self._value_operator = value_operator

    @property
    def num_channels(self):
        """Gets the num_channels of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The num_channels of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._num_channels

    @num_channels.setter
    def num_channels(self, num_channels):
        """Sets the num_channels of this ReadOnlyTriggerSerializer.


        :param num_channels: The num_channels of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """

        self._num_channels = num_channels

    @property
    def num_channels_operator(self):
        """Gets the num_channels_operator of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The num_channels_operator of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._num_channels_operator

    @num_channels_operator.setter
    def num_channels_operator(self, num_channels_operator):
        """Sets the num_channels_operator of this ReadOnlyTriggerSerializer.


        :param num_channels_operator: The num_channels_operator of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "all", "==", "<", ">"]  # noqa: E501
        if num_channels_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `num_channels_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(num_channels_operator, allowed_values)
            )

        self._num_channels_operator = num_channels_operator

    @property
    def created_at(self):
        """Gets the created_at of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The created_at of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReadOnlyTriggerSerializer.


        :param created_at: The created_at of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The updated_at of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReadOnlyTriggerSerializer.


        :param updated_at: The updated_at of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The user of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReadOnlyTriggerSerializer.


        :param user: The user of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def emails(self):
        """Gets the emails of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The emails of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ReadOnlyTriggerSerializer.


        :param emails: The emails of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """

        self._emails = emails

    @property
    def alert_on_out_of_alarm(self):
        """Gets the alert_on_out_of_alarm of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The alert_on_out_of_alarm of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_out_of_alarm

    @alert_on_out_of_alarm.setter
    def alert_on_out_of_alarm(self, alert_on_out_of_alarm):
        """Sets the alert_on_out_of_alarm of this ReadOnlyTriggerSerializer.


        :param alert_on_out_of_alarm: The alert_on_out_of_alarm of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: bool
        """

        self._alert_on_out_of_alarm = alert_on_out_of_alarm

    @property
    def latest_alert(self):
        """Gets the latest_alert of this ReadOnlyTriggerSerializer.  # noqa: E501


        :return: The latest_alert of this ReadOnlyTriggerSerializer.  # noqa: E501
        :rtype: Alert
        """
        return self._latest_alert

    @latest_alert.setter
    def latest_alert(self, latest_alert):
        """Sets the latest_alert of this ReadOnlyTriggerSerializer.


        :param latest_alert: The latest_alert of this ReadOnlyTriggerSerializer.  # noqa: E501
        :type: Alert
        """

        self._latest_alert = latest_alert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadOnlyTriggerSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadOnlyTriggerSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
