# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriteOnlyMatchingRuleSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_regex': 'str',
        'station_regex': 'str',
        'location_regex': 'str',
        'channel_regex': 'str',
        'group': 'int',
        'is_include': 'bool'
    }

    attribute_map = {
        'network_regex': 'network_regex',
        'station_regex': 'station_regex',
        'location_regex': 'location_regex',
        'channel_regex': 'channel_regex',
        'group': 'group',
        'is_include': 'is_include'
    }

    def __init__(self, network_regex=None, station_regex=None, location_regex=None, channel_regex=None, group=None, is_include=None):  # noqa: E501
        """WriteOnlyMatchingRuleSerializer - a model defined in Swagger"""  # noqa: E501
        self._network_regex = None
        self._station_regex = None
        self._location_regex = None
        self._channel_regex = None
        self._group = None
        self._is_include = None
        self.discriminator = None
        if network_regex is not None:
            self.network_regex = network_regex
        if station_regex is not None:
            self.station_regex = station_regex
        if location_regex is not None:
            self.location_regex = location_regex
        if channel_regex is not None:
            self.channel_regex = channel_regex
        self.group = group
        if is_include is not None:
            self.is_include = is_include

    @property
    def network_regex(self):
        """Gets the network_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The network_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: str
        """
        return self._network_regex

    @network_regex.setter
    def network_regex(self, network_regex):
        """Sets the network_regex of this WriteOnlyMatchingRuleSerializer.


        :param network_regex: The network_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: str
        """

        self._network_regex = network_regex

    @property
    def station_regex(self):
        """Gets the station_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The station_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: str
        """
        return self._station_regex

    @station_regex.setter
    def station_regex(self, station_regex):
        """Sets the station_regex of this WriteOnlyMatchingRuleSerializer.


        :param station_regex: The station_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: str
        """

        self._station_regex = station_regex

    @property
    def location_regex(self):
        """Gets the location_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The location_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: str
        """
        return self._location_regex

    @location_regex.setter
    def location_regex(self, location_regex):
        """Sets the location_regex of this WriteOnlyMatchingRuleSerializer.


        :param location_regex: The location_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: str
        """

        self._location_regex = location_regex

    @property
    def channel_regex(self):
        """Gets the channel_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The channel_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: str
        """
        return self._channel_regex

    @channel_regex.setter
    def channel_regex(self, channel_regex):
        """Sets the channel_regex of this WriteOnlyMatchingRuleSerializer.


        :param channel_regex: The channel_regex of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: str
        """

        self._channel_regex = channel_regex

    @property
    def group(self):
        """Gets the group of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The group of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this WriteOnlyMatchingRuleSerializer.


        :param group: The group of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: int
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def is_include(self):
        """Gets the is_include of this WriteOnlyMatchingRuleSerializer.  # noqa: E501


        :return: The is_include of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._is_include

    @is_include.setter
    def is_include(self, is_include):
        """Sets the is_include of this WriteOnlyMatchingRuleSerializer.


        :param is_include: The is_include of this WriteOnlyMatchingRuleSerializer.  # noqa: E501
        :type: bool
        """

        self._is_include = is_include

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyMatchingRuleSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyMatchingRuleSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
