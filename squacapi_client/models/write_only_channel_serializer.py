# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from squacapi_client.configuration import Configuration


class WriteOnlyChannelSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'station_code': 'str',
        'station_name': 'str',
        'description': 'str',
        'sample_rate': 'float',
        'network': 'str',
        'loc': 'str',
        'lat': 'float',
        'lon': 'float',
        'elev': 'float',
        'azimuth': 'float',
        'dip': 'float',
        'starttime': 'datetime',
        'endtime': 'datetime'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'station_code': 'station_code',
        'station_name': 'station_name',
        'description': 'description',
        'sample_rate': 'sample_rate',
        'network': 'network',
        'loc': 'loc',
        'lat': 'lat',
        'lon': 'lon',
        'elev': 'elev',
        'azimuth': 'azimuth',
        'dip': 'dip',
        'starttime': 'starttime',
        'endtime': 'endtime'
    }

    def __init__(self, code=None, name=None, station_code=None, station_name=None, description=None, sample_rate=None, network=None, loc='--', lat=None, lon=None, elev=None, azimuth=None, dip=None, starttime=None, endtime=None, _configuration=None):  # noqa: E501
        """WriteOnlyChannelSerializer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._name = None
        self._station_code = None
        self._station_name = None
        self._description = None
        self._sample_rate = None
        self._network = None
        self._loc = None
        self._lat = None
        self._lon = None
        self._elev = None
        self._azimuth = None
        self._dip = None
        self._starttime = None
        self._endtime = None
        self.discriminator = None

        self.code = code
        if name is not None:
            self.name = name
        self.station_code = station_code
        if station_name is not None:
            self.station_name = station_name
        if description is not None:
            self.description = description
        if sample_rate is not None:
            self.sample_rate = sample_rate
        self.network = network
        if loc is not None:
            self.loc = loc
        self.lat = lat
        self.lon = lon
        self.elev = elev
        if azimuth is not None:
            self.azimuth = azimuth
        if dip is not None:
            self.dip = dip
        if starttime is not None:
            self.starttime = starttime
        if endtime is not None:
            self.endtime = endtime

    @property
    def code(self):
        """Gets the code of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The code of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WriteOnlyChannelSerializer.


        :param code: The code of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                code is not None and len(code) > 3):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                code is not None and len(code) < 1):
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The name of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WriteOnlyChannelSerializer.


        :param name: The name of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def station_code(self):
        """Gets the station_code of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The station_code of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._station_code

    @station_code.setter
    def station_code(self, station_code):
        """Sets the station_code of this WriteOnlyChannelSerializer.


        :param station_code: The station_code of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and station_code is None:
            raise ValueError("Invalid value for `station_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                station_code is not None and len(station_code) > 5):
            raise ValueError("Invalid value for `station_code`, length must be less than or equal to `5`")  # noqa: E501
        if (self._configuration.client_side_validation and
                station_code is not None and len(station_code) < 1):
            raise ValueError("Invalid value for `station_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._station_code = station_code

    @property
    def station_name(self):
        """Gets the station_name of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The station_name of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._station_name

    @station_name.setter
    def station_name(self, station_name):
        """Sets the station_name of this WriteOnlyChannelSerializer.


        :param station_name: The station_name of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                station_name is not None and len(station_name) > 255):
            raise ValueError("Invalid value for `station_name`, length must be less than or equal to `255`")  # noqa: E501

        self._station_name = station_name

    @property
    def description(self):
        """Gets the description of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The description of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WriteOnlyChannelSerializer.


        :param description: The description of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def sample_rate(self):
        """Gets the sample_rate of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The sample_rate of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this WriteOnlyChannelSerializer.


        :param sample_rate: The sample_rate of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """

        self._sample_rate = sample_rate

    @property
    def network(self):
        """Gets the network of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The network of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WriteOnlyChannelSerializer.


        :param network: The network of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def loc(self):
        """Gets the loc of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The loc of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: str
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this WriteOnlyChannelSerializer.


        :param loc: The loc of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                loc is not None and len(loc) > 2):
            raise ValueError("Invalid value for `loc`, length must be less than or equal to `2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                loc is not None and len(loc) < 1):
            raise ValueError("Invalid value for `loc`, length must be greater than or equal to `1`")  # noqa: E501

        self._loc = loc

    @property
    def lat(self):
        """Gets the lat of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The lat of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this WriteOnlyChannelSerializer.


        :param lat: The lat of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The lon of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this WriteOnlyChannelSerializer.


        :param lon: The lon of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def elev(self):
        """Gets the elev of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The elev of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._elev

    @elev.setter
    def elev(self, elev):
        """Sets the elev of this WriteOnlyChannelSerializer.


        :param elev: The elev of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and elev is None:
            raise ValueError("Invalid value for `elev`, must not be `None`")  # noqa: E501

        self._elev = elev

    @property
    def azimuth(self):
        """Gets the azimuth of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The azimuth of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._azimuth

    @azimuth.setter
    def azimuth(self, azimuth):
        """Sets the azimuth of this WriteOnlyChannelSerializer.


        :param azimuth: The azimuth of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """

        self._azimuth = azimuth

    @property
    def dip(self):
        """Gets the dip of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The dip of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: float
        """
        return self._dip

    @dip.setter
    def dip(self, dip):
        """Sets the dip of this WriteOnlyChannelSerializer.


        :param dip: The dip of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: float
        """

        self._dip = dip

    @property
    def starttime(self):
        """Gets the starttime of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The starttime of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this WriteOnlyChannelSerializer.


        :param starttime: The starttime of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: datetime
        """

        self._starttime = starttime

    @property
    def endtime(self):
        """Gets the endtime of this WriteOnlyChannelSerializer.  # noqa: E501


        :return: The endtime of this WriteOnlyChannelSerializer.  # noqa: E501
        :rtype: datetime
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this WriteOnlyChannelSerializer.


        :param endtime: The endtime of this WriteOnlyChannelSerializer.  # noqa: E501
        :type: datetime
        """

        self._endtime = endtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyChannelSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyChannelSerializer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WriteOnlyChannelSerializer):
            return True

        return self.to_dict() != other.to_dict()
