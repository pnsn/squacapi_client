# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WriteOnlyThresholdSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'int',
        'widget': 'int',
        'minval': 'float',
        'maxval': 'float'
    }

    attribute_map = {
        'metric': 'metric',
        'widget': 'widget',
        'minval': 'minval',
        'maxval': 'maxval'
    }

    def __init__(self, metric=None, widget=None, minval=None, maxval=None):  # noqa: E501
        """WriteOnlyThresholdSerializer - a model defined in Swagger"""  # noqa: E501

        self._metric = None
        self._widget = None
        self._minval = None
        self._maxval = None
        self.discriminator = None

        self.metric = metric
        self.widget = widget
        if minval is not None:
            self.minval = minval
        if maxval is not None:
            self.maxval = maxval

    @property
    def metric(self):
        """Gets the metric of this WriteOnlyThresholdSerializer.  # noqa: E501


        :return: The metric of this WriteOnlyThresholdSerializer.  # noqa: E501
        :rtype: int
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this WriteOnlyThresholdSerializer.


        :param metric: The metric of this WriteOnlyThresholdSerializer.  # noqa: E501
        :type: int
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def widget(self):
        """Gets the widget of this WriteOnlyThresholdSerializer.  # noqa: E501


        :return: The widget of this WriteOnlyThresholdSerializer.  # noqa: E501
        :rtype: int
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this WriteOnlyThresholdSerializer.


        :param widget: The widget of this WriteOnlyThresholdSerializer.  # noqa: E501
        :type: int
        """
        if widget is None:
            raise ValueError("Invalid value for `widget`, must not be `None`")  # noqa: E501

        self._widget = widget

    @property
    def minval(self):
        """Gets the minval of this WriteOnlyThresholdSerializer.  # noqa: E501


        :return: The minval of this WriteOnlyThresholdSerializer.  # noqa: E501
        :rtype: float
        """
        return self._minval

    @minval.setter
    def minval(self, minval):
        """Sets the minval of this WriteOnlyThresholdSerializer.


        :param minval: The minval of this WriteOnlyThresholdSerializer.  # noqa: E501
        :type: float
        """

        self._minval = minval

    @property
    def maxval(self):
        """Gets the maxval of this WriteOnlyThresholdSerializer.  # noqa: E501


        :return: The maxval of this WriteOnlyThresholdSerializer.  # noqa: E501
        :rtype: float
        """
        return self._maxval

    @maxval.setter
    def maxval(self, maxval):
        """Sets the maxval of this WriteOnlyThresholdSerializer.


        :param maxval: The maxval of this WriteOnlyThresholdSerializer.  # noqa: E501
        :type: float
        """

        self._maxval = maxval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyThresholdSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyThresholdSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
