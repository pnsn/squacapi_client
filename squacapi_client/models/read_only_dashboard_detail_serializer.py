# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReadOnlyDashboardDetailSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'name': 'str',
        'widgets': 'list[int]',
        'channel_group': 'int',
        'user': 'int',
        'share_all': 'bool',
        'share_org': 'bool',
        'organization': 'int',
        'properties': 'str'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'name': 'name',
        'widgets': 'widgets',
        'channel_group': 'channel_group',
        'user': 'user',
        'share_all': 'share_all',
        'share_org': 'share_org',
        'organization': 'organization',
        'properties': 'properties'
    }

    def __init__(self, id=None, description=None, name=None, widgets=None, channel_group=None, user=None, share_all=None, share_org=None, organization=None, properties=None):  # noqa: E501
        """ReadOnlyDashboardDetailSerializer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._name = None
        self._widgets = None
        self._channel_group = None
        self._user = None
        self._share_all = None
        self._share_org = None
        self._organization = None
        self._properties = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        self.name = name
        self.widgets = widgets
        if channel_group is not None:
            self.channel_group = channel_group
        if user is not None:
            self.user = user
        if share_all is not None:
            self.share_all = share_all
        if share_org is not None:
            self.share_org = share_org
        self.organization = organization
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The id of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReadOnlyDashboardDetailSerializer.


        :param id: The id of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The description of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReadOnlyDashboardDetailSerializer.


        :param description: The description of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The name of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReadOnlyDashboardDetailSerializer.


        :param name: The name of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def widgets(self):
        """Gets the widgets of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The widgets of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: list[int]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this ReadOnlyDashboardDetailSerializer.


        :param widgets: The widgets of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: list[int]
        """
        if widgets is None:
            raise ValueError("Invalid value for `widgets`, must not be `None`")  # noqa: E501

        self._widgets = widgets

    @property
    def channel_group(self):
        """Gets the channel_group of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The channel_group of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._channel_group

    @channel_group.setter
    def channel_group(self, channel_group):
        """Sets the channel_group of this ReadOnlyDashboardDetailSerializer.


        :param channel_group: The channel_group of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: int
        """

        self._channel_group = channel_group

    @property
    def user(self):
        """Gets the user of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The user of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReadOnlyDashboardDetailSerializer.


        :param user: The user of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def share_all(self):
        """Gets the share_all of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The share_all of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_all

    @share_all.setter
    def share_all(self, share_all):
        """Sets the share_all of this ReadOnlyDashboardDetailSerializer.


        :param share_all: The share_all of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: bool
        """

        self._share_all = share_all

    @property
    def share_org(self):
        """Gets the share_org of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The share_org of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._share_org

    @share_org.setter
    def share_org(self, share_org):
        """Sets the share_org of this ReadOnlyDashboardDetailSerializer.


        :param share_org: The share_org of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: bool
        """

        self._share_org = share_org

    @property
    def organization(self):
        """Gets the organization of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The organization of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ReadOnlyDashboardDetailSerializer.


        :param organization: The organization of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: int
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def properties(self):
        """Gets the properties of this ReadOnlyDashboardDetailSerializer.  # noqa: E501


        :return: The properties of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ReadOnlyDashboardDetailSerializer.


        :param properties: The properties of this ReadOnlyDashboardDetailSerializer.  # noqa: E501
        :type: str
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadOnlyDashboardDetailSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadOnlyDashboardDetailSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
