# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from squacapi_client.configuration import Configuration


class WriteOnlyTriggerSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor': 'int',
        'minval': 'float',
        'maxval': 'float',
        'band_inclusive': 'bool',
        'level': 'int'
    }

    attribute_map = {
        'monitor': 'monitor',
        'minval': 'minval',
        'maxval': 'maxval',
        'band_inclusive': 'band_inclusive',
        'level': 'level'
    }

    def __init__(self, monitor=None, minval=None, maxval=None, band_inclusive=None, level=None, _configuration=None):  # noqa: E501
        """WriteOnlyTriggerSerializer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._monitor = None
        self._minval = None
        self._maxval = None
        self._band_inclusive = None
        self._level = None
        self.discriminator = None

        self.monitor = monitor
        if minval is not None:
            self.minval = minval
        if maxval is not None:
            self.maxval = maxval
        if band_inclusive is not None:
            self.band_inclusive = band_inclusive
        if level is not None:
            self.level = level

    @property
    def monitor(self):
        """Gets the monitor of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The monitor of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this WriteOnlyTriggerSerializer.


        :param monitor: The monitor of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def minval(self):
        """Gets the minval of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The minval of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._minval

    @minval.setter
    def minval(self, minval):
        """Sets the minval of this WriteOnlyTriggerSerializer.


        :param minval: The minval of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """

        self._minval = minval

    @property
    def maxval(self):
        """Gets the maxval of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The maxval of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._maxval

    @maxval.setter
    def maxval(self, maxval):
        """Sets the maxval of this WriteOnlyTriggerSerializer.


        :param maxval: The maxval of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """

        self._maxval = maxval

    @property
    def band_inclusive(self):
        """Gets the band_inclusive of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The band_inclusive of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._band_inclusive

    @band_inclusive.setter
    def band_inclusive(self, band_inclusive):
        """Sets the band_inclusive of this WriteOnlyTriggerSerializer.


        :param band_inclusive: The band_inclusive of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: bool
        """

        self._band_inclusive = band_inclusive

    @property
    def level(self):
        """Gets the level of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The level of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this WriteOnlyTriggerSerializer.


        :param level: The level of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """

        self._level = level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyTriggerSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyTriggerSerializer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WriteOnlyTriggerSerializer):
            return True

        return self.to_dict() != other.to_dict()
