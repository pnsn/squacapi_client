# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriteOnlyTriggerSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor': 'int',
        'val1': 'float',
        'val2': 'float',
        'value_operator': 'str',
        'num_channels': 'int',
        'num_channels_operator': 'str',
        'email_list': 'str',
        'alert_on_out_of_alarm': 'bool'
    }

    attribute_map = {
        'monitor': 'monitor',
        'val1': 'val1',
        'val2': 'val2',
        'value_operator': 'value_operator',
        'num_channels': 'num_channels',
        'num_channels_operator': 'num_channels_operator',
        'email_list': 'email_list',
        'alert_on_out_of_alarm': 'alert_on_out_of_alarm'
    }

    def __init__(self, monitor=None, val1=None, val2=None, value_operator=None, num_channels=None, num_channels_operator=None, email_list=None, alert_on_out_of_alarm=None):  # noqa: E501
        """WriteOnlyTriggerSerializer - a model defined in Swagger"""  # noqa: E501
        self._monitor = None
        self._val1 = None
        self._val2 = None
        self._value_operator = None
        self._num_channels = None
        self._num_channels_operator = None
        self._email_list = None
        self._alert_on_out_of_alarm = None
        self.discriminator = None
        self.monitor = monitor
        self.val1 = val1
        if val2 is not None:
            self.val2 = val2
        if value_operator is not None:
            self.value_operator = value_operator
        if num_channels is not None:
            self.num_channels = num_channels
        if num_channels_operator is not None:
            self.num_channels_operator = num_channels_operator
        if email_list is not None:
            self.email_list = email_list
        if alert_on_out_of_alarm is not None:
            self.alert_on_out_of_alarm = alert_on_out_of_alarm

    @property
    def monitor(self):
        """Gets the monitor of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The monitor of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this WriteOnlyTriggerSerializer.


        :param monitor: The monitor of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def val1(self):
        """Gets the val1 of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The val1 of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._val1

    @val1.setter
    def val1(self, val1):
        """Sets the val1 of this WriteOnlyTriggerSerializer.


        :param val1: The val1 of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """
        if val1 is None:
            raise ValueError("Invalid value for `val1`, must not be `None`")  # noqa: E501

        self._val1 = val1

    @property
    def val2(self):
        """Gets the val2 of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The val2 of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: float
        """
        return self._val2

    @val2.setter
    def val2(self, val2):
        """Sets the val2 of this WriteOnlyTriggerSerializer.


        :param val2: The val2 of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: float
        """

        self._val2 = val2

    @property
    def value_operator(self):
        """Gets the value_operator of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The value_operator of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._value_operator

    @value_operator.setter
    def value_operator(self, value_operator):
        """Sets the value_operator of this WriteOnlyTriggerSerializer.


        :param value_operator: The value_operator of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """
        allowed_values = ["outsideof", "within", "==", "<", "<=", ">", ">="]  # noqa: E501
        if value_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `value_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(value_operator, allowed_values)
            )

        self._value_operator = value_operator

    @property
    def num_channels(self):
        """Gets the num_channels of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The num_channels of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: int
        """
        return self._num_channels

    @num_channels.setter
    def num_channels(self, num_channels):
        """Sets the num_channels of this WriteOnlyTriggerSerializer.


        :param num_channels: The num_channels of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: int
        """

        self._num_channels = num_channels

    @property
    def num_channels_operator(self):
        """Gets the num_channels_operator of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The num_channels_operator of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._num_channels_operator

    @num_channels_operator.setter
    def num_channels_operator(self, num_channels_operator):
        """Sets the num_channels_operator of this WriteOnlyTriggerSerializer.


        :param num_channels_operator: The num_channels_operator of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "all", "==", "<", ">"]  # noqa: E501
        if num_channels_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `num_channels_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(num_channels_operator, allowed_values)
            )

        self._num_channels_operator = num_channels_operator

    @property
    def email_list(self):
        """Gets the email_list of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The email_list of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: str
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this WriteOnlyTriggerSerializer.


        :param email_list: The email_list of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: str
        """

        self._email_list = email_list

    @property
    def alert_on_out_of_alarm(self):
        """Gets the alert_on_out_of_alarm of this WriteOnlyTriggerSerializer.  # noqa: E501


        :return: The alert_on_out_of_alarm of this WriteOnlyTriggerSerializer.  # noqa: E501
        :rtype: bool
        """
        return self._alert_on_out_of_alarm

    @alert_on_out_of_alarm.setter
    def alert_on_out_of_alarm(self, alert_on_out_of_alarm):
        """Sets the alert_on_out_of_alarm of this WriteOnlyTriggerSerializer.


        :param alert_on_out_of_alarm: The alert_on_out_of_alarm of this WriteOnlyTriggerSerializer.  # noqa: E501
        :type: bool
        """

        self._alert_on_out_of_alarm = alert_on_out_of_alarm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyTriggerSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyTriggerSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
