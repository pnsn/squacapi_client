# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from squacapi_client.configuration import Configuration


class WriteOnlyContactSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_value': 'str',
        'sms_value': 'str',
        'name': 'str'
    }

    attribute_map = {
        'email_value': 'email_value',
        'sms_value': 'sms_value',
        'name': 'name'
    }

    def __init__(self, email_value=None, sms_value=None, name=None, _configuration=None):  # noqa: E501
        """WriteOnlyContactSerializer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_value = None
        self._sms_value = None
        self._name = None
        self.discriminator = None

        if email_value is not None:
            self.email_value = email_value
        if sms_value is not None:
            self.sms_value = sms_value
        if name is not None:
            self.name = name

    @property
    def email_value(self):
        """Gets the email_value of this WriteOnlyContactSerializer.  # noqa: E501


        :return: The email_value of this WriteOnlyContactSerializer.  # noqa: E501
        :rtype: str
        """
        return self._email_value

    @email_value.setter
    def email_value(self, email_value):
        """Sets the email_value of this WriteOnlyContactSerializer.


        :param email_value: The email_value of this WriteOnlyContactSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email_value is not None and len(email_value) > 255):
            raise ValueError("Invalid value for `email_value`, length must be less than or equal to `255`")  # noqa: E501

        self._email_value = email_value

    @property
    def sms_value(self):
        """Gets the sms_value of this WriteOnlyContactSerializer.  # noqa: E501


        :return: The sms_value of this WriteOnlyContactSerializer.  # noqa: E501
        :rtype: str
        """
        return self._sms_value

    @sms_value.setter
    def sms_value(self, sms_value):
        """Sets the sms_value of this WriteOnlyContactSerializer.


        :param sms_value: The sms_value of this WriteOnlyContactSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                sms_value is not None and len(sms_value) > 255):
            raise ValueError("Invalid value for `sms_value`, length must be less than or equal to `255`")  # noqa: E501

        self._sms_value = sms_value

    @property
    def name(self):
        """Gets the name of this WriteOnlyContactSerializer.  # noqa: E501


        :return: The name of this WriteOnlyContactSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WriteOnlyContactSerializer.


        :param name: The name of this WriteOnlyContactSerializer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOnlyContactSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOnlyContactSerializer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WriteOnlyContactSerializer):
            return True

        return self.to_dict() != other.to_dict()
