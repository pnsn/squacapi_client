# coding: utf-8

"""
    Squac API

    API for accessing squac data  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReadOnlyWidgetDetailSerializer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'dashboard': 'int',
        'metrics': 'list[Metric]',
        'thresholds': 'object',
        'user': 'int',
        'type': 'str',
        'stat': 'str',
        'properties': 'object',
        'layout': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'dashboard': 'dashboard',
        'metrics': 'metrics',
        'thresholds': 'thresholds',
        'user': 'user',
        'type': 'type',
        'stat': 'stat',
        'properties': 'properties',
        'layout': 'layout'
    }

    def __init__(self, id=None, name=None, dashboard=None, metrics=None, thresholds=None, user=None, type=None, stat=None, properties=None, layout=None):  # noqa: E501
        """ReadOnlyWidgetDetailSerializer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._dashboard = None
        self._metrics = None
        self._thresholds = None
        self._user = None
        self._type = None
        self._stat = None
        self._properties = None
        self._layout = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.dashboard = dashboard
        if metrics is not None:
            self.metrics = metrics
        if thresholds is not None:
            self.thresholds = thresholds
        if user is not None:
            self.user = user
        if type is not None:
            self.type = type
        if stat is not None:
            self.stat = stat
        if properties is not None:
            self.properties = properties
        if layout is not None:
            self.layout = layout

    @property
    def id(self):
        """Gets the id of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The id of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReadOnlyWidgetDetailSerializer.


        :param id: The id of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The name of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReadOnlyWidgetDetailSerializer.


        :param name: The name of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def dashboard(self):
        """Gets the dashboard of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The dashboard of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this ReadOnlyWidgetDetailSerializer.


        :param dashboard: The dashboard of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: int
        """
        if dashboard is None:
            raise ValueError("Invalid value for `dashboard`, must not be `None`")  # noqa: E501

        self._dashboard = dashboard

    @property
    def metrics(self):
        """Gets the metrics of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The metrics of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReadOnlyWidgetDetailSerializer.


        :param metrics: The metrics of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: list[Metric]
        """

        self._metrics = metrics

    @property
    def thresholds(self):
        """Gets the thresholds of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The thresholds of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: object
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this ReadOnlyWidgetDetailSerializer.


        :param thresholds: The thresholds of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: object
        """

        self._thresholds = thresholds

    @property
    def user(self):
        """Gets the user of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The user of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReadOnlyWidgetDetailSerializer.


        :param user: The user of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def type(self):
        """Gets the type of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The type of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReadOnlyWidgetDetailSerializer.


        :param type: The type of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def stat(self):
        """Gets the stat of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The stat of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: str
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this ReadOnlyWidgetDetailSerializer.


        :param stat: The stat of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: str
        """

        self._stat = stat

    @property
    def properties(self):
        """Gets the properties of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The properties of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ReadOnlyWidgetDetailSerializer.


        :param properties: The properties of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def layout(self):
        """Gets the layout of this ReadOnlyWidgetDetailSerializer.  # noqa: E501


        :return: The layout of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :rtype: object
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this ReadOnlyWidgetDetailSerializer.


        :param layout: The layout of this ReadOnlyWidgetDetailSerializer.  # noqa: E501
        :type: object
        """

        self._layout = layout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadOnlyWidgetDetailSerializer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadOnlyWidgetDetailSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
